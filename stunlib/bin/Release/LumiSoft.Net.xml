<?xml version="1.0"?>
<doc>
    <assembly>
        <name>stunlib</name>
    </assembly>
    <members>
        <member name="T:stunlib.Message.STUN_t_ErrorCode">
            <summary>
            This class implements STUN ERROR-CODE. Defined in RFC 3489 11.2.9.
            </summary>
        </member>
        <member name="M:stunlib.Message.STUN_t_ErrorCode.#ctor(System.Int32,System.String)">
            <summary>
            Default constructor.
            </summary>
            <param name="code">Error code.</param>
            <param name="reasonText">Reason text.</param>
        </member>
        <member name="P:stunlib.Message.STUN_t_ErrorCode.Code">
            <summary>
            Gets or sets error code.
            </summary>
        </member>
        <member name="P:stunlib.Message.STUN_t_ErrorCode.ReasonText">
            <summary>
            Gets reason text.
            </summary>
        </member>
        <member name="T:stunlib.Message.STUN_MessageType">
            <summary>
            This enum specifies STUN message type.
            </summary>
        </member>
        <member name="F:stunlib.Message.STUN_MessageType.BindingRequest">
            <summary>
            STUN message is binding request.
            </summary>
        </member>
        <member name="F:stunlib.Message.STUN_MessageType.BindingResponse">
            <summary>
            STUN message is binding request response.
            </summary>
        </member>
        <member name="F:stunlib.Message.STUN_MessageType.BindingErrorResponse">
            <summary>
            STUN message is binding requesr error response.
            </summary>
        </member>
        <member name="F:stunlib.Message.STUN_MessageType.SharedSecretRequest">
            <summary>
            STUN message is "shared secret" request.
            </summary>
        </member>
        <member name="F:stunlib.Message.STUN_MessageType.SharedSecretResponse">
            <summary>
            STUN message is "shared secret" request response.
            </summary>
        </member>
        <member name="F:stunlib.Message.STUN_MessageType.SharedSecretErrorResponse">
            <summary>
            STUN message is "shared secret" request error response.
            </summary>
        </member>
        <member name="T:stunlib.Client.STUN_Result">
            <summary>
            This class holds STUN_Client.Query method return data.
            </summary>
        </member>
        <member name="M:stunlib.Client.STUN_Result.#ctor(stunlib.Client.STUN_NetType,System.Net.IPEndPoint)">
            <summary>
            Default constructor.
            </summary>
            <param name="netType">Specifies UDP network type.</param>
            <param name="publicEndPoint">Public IP end point.</param>
        </member>
        <member name="P:stunlib.Client.STUN_Result.NetType">
            <summary>
            Gets UDP network type.
            </summary>
        </member>
        <member name="P:stunlib.Client.STUN_Result.PublicEndPoint">
            <summary>
            Gets public IP end point. This value is null if failed to get network type.
            </summary>
        </member>
        <member name="T:stunlib.Net_Utils">
            <summary>
            Common utility methods.
            </summary>
        </member>
        <member name="M:stunlib.Net_Utils.GetLocalHostName(System.String)">
            <summary>
            Gets local host name or argument <b>hostName</b> value if it's specified.
            </summary>
            <param name="hostName">Host name or null.</param>
            <returns>Returns local host name or argument <b>hostName</b> value if it's specified.</returns>
        </member>
        <member name="M:stunlib.Net_Utils.CompareArray(System.Array,System.Array)">
            <summary>
            Compares if specified array itmes equals.
            </summary>
            <param name="array1">Array 1.</param>
            <param name="array2">Array 2</param>
            <returns>Returns true if both arrays are equal.</returns>
        </member>
        <member name="M:stunlib.Net_Utils.CompareArray(System.Array,System.Array,System.Int32)">
            <summary>
            Compares if specified array itmes equals.
            </summary>
            <param name="array1">Array 1.</param>
            <param name="array2">Array 2</param>
            <param name="array2Count">Number of bytes in array 2 used for compare.</param>
            <returns>Returns true if both arrays are equal.</returns>
        </member>
        <member name="M:stunlib.Net_Utils.ReverseArray(System.Array)">
            <summary>
            Reverses the specified array elements.
            </summary>
            <param name="array">Array elements to reverse.</param>
            <returns>Returns array with reversed items.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>array</b> is null.</exception>
        </member>
        <member name="M:stunlib.Net_Utils.ArrayToString(System.String[],System.String)">
            <summary>
            Convert array elements to string.
            </summary>
            <param name="values">String values.</param>
            <param name="delimiter">Values delimiter.</param>
            <returns>Returns array elements as string.</returns>
        </member>
        <member name="M:stunlib.Net_Utils.StreamCopy(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies <b>source</b> stream data to <b>target</b> stream.
            </summary>
            <param name="source">Source stream. Reading starts from stream current position.</param>
            <param name="target">Target stream. Writing starts from stream current position.</param>
            <param name="blockSize">Specifies transfer block size in bytes.</param>
            <returns>Returns number of bytes copied.</returns>
        </member>
        <member name="M:stunlib.Net_Utils.CompareIP(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Compares 2 IP addresses. Returns 0 if IPs are equal, 
            returns positive value if destination IP is bigger than source IP,
            returns negative value if destination IP is smaller than source IP.
            </summary>
            <param name="source">Source IP address.</param>
            <param name="destination">Destination IP address.</param>
            <returns>Returns 0 if IPs are equal, 
            returns positive value if destination IP is bigger than source IP,
            returns negative value if destination IP is smaller than source IP.
            </returns>
        </member>
        <member name="M:stunlib.Net_Utils.IsIPAddress(System.String)">
            <summary>
            Gets if the specified string value is IP address.
            </summary>
            <param name="value">Value to check.</param>
            <returns>Returns true if specified value is IP address.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:stunlib.Net_Utils.IsMulticastAddress(System.Net.IPAddress)">
            <summary>
            Gets if the specified IP address is multicast address.
            </summary>
            <param name="ip">IP address.</param>
            <returns>Returns true if <b>ip</b> is muticast address, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> s null reference.</exception>
        </member>
        <member name="M:stunlib.Net_Utils.IsPrivateIP(System.String)">
            <summary>
            Gets if specified IP address is private LAN IP address. For example 192.168.x.x is private ip.
            </summary>
            <param name="ip">IP address to check.</param>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
            <returns>Returns true if IP is private IP.</returns>
        </member>
        <member name="M:stunlib.Net_Utils.IsPrivateIP(System.Net.IPAddress)">
            <summary>
            Gets if specified IP address is private LAN IP address. For example 192.168.x.x is private ip.
            </summary>
            <param name="ip">IP address to check.</param>
            <returns>Returns true if IP is private IP.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>ip</b> is null reference.</exception>
        </member>
        <member name="M:stunlib.Net_Utils.ParseIPEndPoint(System.String)">
            <summary>
            Parses IPEndPoint from the specified string value.
            </summary>
            <param name="value">IPEndPoint string value.</param>
            <returns>Returns parsed IPEndPoint.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
        </member>
        <member name="M:stunlib.Net_Utils.IsInteger(System.String)">
            <summary>
            Checks if specified string is integer(int/long).
            </summary>
            <param name="value"></param>
            <returns>Returns true if specified string is integer.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:stunlib.Net_Utils.IsAscii(System.String)">
            <summary>
            Gets if the specified string is ASCII string.
            </summary>
            <param name="value">String value.</param>
            <returns>Returns true if specified string is ASCII string, otherwise false.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
        </member>
        <member name="M:stunlib.Net_Utils.IsIoCompletionPortsSupported">
            <summary>
            Gets if IO completion ports supported by OS.
            </summary>
            <returns></returns>
        </member>
        <member name="M:stunlib.Net_Utils.CreateSocket(System.Net.IPEndPoint,System.Net.Sockets.ProtocolType)">
            <summary>
            Creates new socket for the specified end point.
            </summary>
            <param name="localEP">Local end point.</param>
            <param name="protocolType">Protocol type.</param>
            <returns>Retruns newly created socket.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>localEP</b> is null reference.</exception>
        </member>
        <member name="M:stunlib.Net_Utils.ToHex(System.Byte[])">
            <summary>
            Converts specified data to HEX string.
            </summary>
            <param name="data">Data to convert.</param>
            <returns>Returns hex string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:stunlib.Net_Utils.ToHex(System.String)">
            <summary>
            Converts specified string to HEX string.
            </summary>
            <param name="text">String to convert.</param>
            <returns>Returns hex string.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="M:stunlib.Net_Utils.FromHex(System.Byte[])">
            <summary>
            Converts hex byte data to normal byte data. Hex data must be in two bytes pairs, for example: 0F,FF,A3,... .
            </summary>
            <param name="hexData">Hex data.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>hexData</b> is null reference.</exception>
        </member>
        <member name="M:stunlib.Net_Utils.FromBase64(System.String)">
            <summary>
            Decodes specified base64 data.
            </summary>
            <param name="data">Base64 string.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:stunlib.Net_Utils.FromBase64(System.Byte[])">
            <summary>
            Decodes specified base64 data.
            </summary>
            <param name="data">Base64 data.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
        </member>
        <member name="M:stunlib.Net_Utils.Base64Encode(System.Byte[])">
            <summary>
            Encodes specified data with base64 encoding.
            </summary>
            <param name="data">Data to encode.</param>
            <returns></returns>
        </member>
        <member name="M:stunlib.Net_Utils.Base64EncodeEx(System.Byte[],System.Char[],System.Boolean)">
            <summary>
            Encodes specified data with bas64 encoding.
            </summary>
            <param name="data">Data to to encode.</param>
            <param name="base64Chars">Custom base64 chars (64 chars) or null if default chars used.</param>
            <param name="padd">Padd missing block chars. Normal base64 must be 4 bytes blocks, if not 4 bytes in block, 
            missing bytes must be padded with '='. Modified base64 just skips missing bytes.</param>
            <returns></returns>
        </member>
        <member name="M:stunlib.Net_Utils.Base64DecodeEx(System.Byte[],System.Char[])">
            <summary>
            Decodes base64 data. Defined in RFC 2045 6.8.  Base64 Content-Transfer-Encoding.
            </summary>
            <param name="base64Data">Base64 decoded data.</param>
            <param name="base64Chars">Custom base64 chars (64 chars) or null if default chars used.</param>
            <returns></returns>
        </member>
        <member name="M:stunlib.Net_Utils.ComputeMd5(System.String,System.Boolean)">
            <summary>
            Computes md5 hash.
            </summary>
            <param name="text">Text to hash.</param>
            <param name="hex">Specifies if md5 value is returned as hex string.</param>
            <returns>Returns md5 value or md5 hex value.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>text</b> is null reference.</exception>
        </member>
        <member name="T:stunlib.Client.STUN_Client">
            <summary>
            This class implements STUN client. Defined in RFC 3489.
            </summary>
            <example>
            <code>
            // Create new socket for STUN client.
            Socket socket = new Socket(AddressFamily.InterNetwork,SocketType.Dgram,ProtocolType.Udp);
            socket.Bind(new IPEndPoint(IPAddress.Any,0));
            
            // Query STUN server
            STUN_Result result = STUN_Client.Query("stunserver.org",3478,socket);
            if(result.NetType != STUN_NetType.UdpBlocked){
                // UDP blocked or !!!! bad STUN server
            }
            else{
                IPEndPoint publicEP = result.PublicEndPoint;
                // Do your stuff
            }
            </code>
            </example>
        </member>
        <member name="M:stunlib.Client.STUN_Client.Query(System.String,System.Int32,System.Net.IPEndPoint)">
            <summary>
            Gets NAT info from STUN server.
            </summary>
            <param name="host">STUN server name or IP.</param>
            <param name="port">STUN server port. Default port is 3478.</param>
            <param name="localEP">Local IP end point.</param>
            <returns>Returns UDP netwrok info.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>host</b> or <b>localEP</b> is null reference.</exception>
            <exception cref="T:System.Exception">Throws exception if unexpected error happens.</exception>
        </member>
        <member name="M:stunlib.Client.STUN_Client.Query(System.String,System.Int32,System.Net.Sockets.Socket)">
            <summary>
            Gets NAT info from STUN server.
            </summary>
            <param name="host">STUN server name or IP.</param>
            <param name="port">STUN server port. Default port is 3478.</param>
            <param name="socket">UDP socket to use.</param>
            <returns>Returns UDP netwrok info.</returns>
            <exception cref="T:System.Exception">Throws exception if unexpected error happens.</exception>
        </member>
        <member name="M:stunlib.Client.STUN_Client.GetPublicIP(System.String,System.Int32,System.Net.IPAddress)">
            <summary>
            Resolves local IP to public IP using STUN.
            </summary>
            <param name="stunServer">STUN server.</param>
            <param name="port">STUN server port. Default port is 3478.</param>
            <param name="localIP">Local IP address.</param>
            <returns>Returns public IP address.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>stunServer</b> or <b>localIP</b> is null reference.</exception>
            <exception cref="T:System.ArgumentException">Is raised when any of the arguments has invalid value.</exception>
            <exception cref="T:System.IO.IOException">Is raised when no connection to STUN server.</exception>
        </member>
        <member name="M:stunlib.Client.STUN_Client.DoTransaction(stunlib.Message.STUN_Message,System.Net.Sockets.Socket,System.Net.IPEndPoint)">
            <summary>
            Does STUN transaction. Returns transaction response or null if transaction failed.
            </summary>
            <param name="request">STUN message.</param>
            <param name="socket">Socket to use for send/receive.</param>
            <param name="remoteEndPoint">Remote end point.</param>
            <returns>Returns transaction response or null if transaction failed.</returns>
        </member>
        <member name="T:stunlib.IO.Base64">
            <summary>
            This class implements base64 encoder/decoder.  Defined in RFC 4648.
            </summary>
        </member>
        <member name="M:stunlib.IO.Base64.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:stunlib.IO.Base64.Encode(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Encodes bytes.
            </summary>
            <param name="buffer">Data buffer.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes available in the buffer.</param>
            <param name="last">Last data block.</param>
            <returns>Returns encoded data.</returns>
        </member>
        <member name="M:stunlib.IO.Base64.Decode(System.String,System.Boolean)">
            <summary>
            Decodes specified base64 string.
            </summary>
            <param name="value">Base64 string.</param>
            <param name="ignoreNonBase64Chars">If true all invalid base64 chars ignored. If false, FormatException is raised.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>value</b> is null reference.</exception>
            <exception cref="T:System.FormatException">Is raised when <b>value</b> contains invalid base64 data.</exception>
        </member>
        <member name="M:stunlib.IO.Base64.Decode(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Decodes specified base64 data.
            </summary>
            <param name="data">Base64 encoded data buffer.</param>
            <param name="offset">Offset in the buffer.</param>
            <param name="count">Number of bytes available in the buffer.</param>
            <param name="ignoreNonBase64Chars">If true all invalid base64 chars ignored. If false, FormatException is raised.</param>
            <returns>Returns decoded data.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>data</b> is null reference.</exception>
            <exception cref="T:System.FormatException">Is raised when <b>value</b> contains invalid base64 data.</exception>
        </member>
        <member name="M:stunlib.IO.Base64.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Decodes base64 encoded bytes.
            </summary>
            <param name="encBuffer">Base64 encoded data buffer.</param>
            <param name="encOffset">Offset in the encBuffer.</param>
            <param name="encCount">Number of bytes available in the encBuffer.</param>
            <param name="buffer">Buffer where to decode data.</param>
            <param name="offset">Offset int the buffer.</param>
            <param name="ignoreNonBase64Chars">If true all invalid base64 chars ignored. If false, FormatException is raised.</param>
            <returns>Returns number of bytes decoded.</returns>
            <exception cref="T:System.ArgumentNullException">Is raised when <b>encBuffer</b> or <b>encBuffer</b> is null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Is raised when any of the arguments has out of valid range.</exception>
            <exception cref="T:System.FormatException">Is raised when <b>encBuffer</b> contains invalid base64 data.</exception>
        </member>
        <member name="T:stunlib.Message.STUN_t_ChangeRequest">
            <summary>
            This class implements STUN CHANGE-REQUEST attribute. Defined in RFC 3489 11.2.4.
            </summary>
        </member>
        <member name="M:stunlib.Message.STUN_t_ChangeRequest.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:stunlib.Message.STUN_t_ChangeRequest.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Default constructor.
            </summary>
            <param name="changeIP">Specifies if STUN server must send response to different IP than request was received.</param>
            <param name="changePort">Specifies if STUN server must send response to different port than request was received.</param>
        </member>
        <member name="P:stunlib.Message.STUN_t_ChangeRequest.ChangeIP">
            <summary>
            Gets or sets if STUN server must send response to different IP than request was received.
            </summary>
        </member>
        <member name="P:stunlib.Message.STUN_t_ChangeRequest.ChangePort">
            <summary>
            Gets or sets if STUN server must send response to different port than request was received.
            </summary>
        </member>
        <member name="T:stunlib.Message.STUN_Message">
            <summary>
            Implements STUN message. Defined in RFC 3489.
            </summary>
        </member>
        <member name="M:stunlib.Message.STUN_Message.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:stunlib.Message.STUN_Message.Parse(System.Byte[])">
            <summary>
            Parses STUN message from raw data packet.
            </summary>
            <param name="data">Raw STUN message.</param>
        </member>
        <member name="M:stunlib.Message.STUN_Message.ToByteData">
            <summary>
            Converts this to raw STUN packet.
            </summary>
            <returns>Returns raw STUN packet.</returns>
        </member>
        <member name="M:stunlib.Message.STUN_Message.ParseAttribute(System.Byte[],System.Int32@)">
            <summary>
            Parses attribute from data.
            </summary>
            <param name="data">SIP message data.</param>
            <param name="offset">Offset in data.</param>
        </member>
        <member name="M:stunlib.Message.STUN_Message.ParseEndPoint(System.Byte[],System.Int32@)">
            <summary>
            Pasrses IP endpoint attribute.
            </summary>
            <param name="data">STUN message data.</param>
            <param name="offset">Offset in data.</param>
            <returns>Returns parsed IP end point.</returns>
        </member>
        <member name="M:stunlib.Message.STUN_Message.StoreEndPoint(stunlib.Message.STUN_Message.AttributeType,System.Net.IPEndPoint,System.Byte[],System.Int32@)">
            <summary>
            Stores ip end point attribute to buffer.
            </summary>
            <param name="type">Attribute type.</param>
            <param name="endPoint">IP end point.</param>
            <param name="message">Buffer where to store.</param>
            <param name="offset">Offset in buffer.</param>
        </member>
        <member name="P:stunlib.Message.STUN_Message.Type">
            <summary>
            Gets STUN message type.
            </summary>
        </member>
        <member name="P:stunlib.Message.STUN_Message.TransactionID">
            <summary>
            Gets transaction ID.
            </summary>
        </member>
        <member name="P:stunlib.Message.STUN_Message.MappedAddress">
            <summary>
            Gets or sets IP end point what was actually connected to STUN server. Returns null if not specified.
            </summary>
        </member>
        <member name="P:stunlib.Message.STUN_Message.ResponseAddress">
            <summary>
            Gets or sets IP end point where to STUN client likes to receive response.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:stunlib.Message.STUN_Message.ChangeRequest">
            <summary>
            Gets or sets how and where STUN server must send response back to STUN client.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:stunlib.Message.STUN_Message.SourceAddress">
            <summary>
            Gets or sets STUN server IP end point what sent response to STUN client. Value null
            means not specified.
            </summary>
        </member>
        <member name="P:stunlib.Message.STUN_Message.ChangedAddress">
            <summary>
            Gets or sets IP end point where STUN server will send response back to STUN client 
            if the "change IP" and "change port" flags had been set in the ChangeRequest.
            </summary>
        </member>
        <member name="P:stunlib.Message.STUN_Message.UserName">
            <summary>
            Gets or sets user name. Value null means not specified.
            </summary>          
        </member>
        <member name="P:stunlib.Message.STUN_Message.Password">
            <summary>
            Gets or sets password. Value null means not specified.
            </summary>
        </member>
        <member name="P:stunlib.Message.STUN_Message.ErrorCode">
            <summary>
            Gets or sets error info. Returns null if not specified.
            </summary>
        </member>
        <member name="P:stunlib.Message.STUN_Message.ReflectedFrom">
            <summary>
            Gets or sets IP endpoint from which IP end point STUN server got STUN client request.
            Value null means not specified.
            </summary>
        </member>
        <member name="P:stunlib.Message.STUN_Message.ServerName">
            <summary>
            Gets or sets server name.
            </summary>
        </member>
        <member name="T:stunlib.Message.STUN_Message.AttributeType">
            <summary>
            Specifies STUN attribute type.
            </summary>
        </member>
        <member name="T:stunlib.Message.STUN_Message.IPFamily">
            <summary>
            Specifies IP address family.
            </summary>
        </member>
        <member name="T:stunlib.Client.STUN_NetType">
            <summary>
            Specifies UDP network type.
            </summary>
        </member>
        <member name="F:stunlib.Client.STUN_NetType.UdpBlocked">
            <summary>
            UDP is always blocked.
            </summary>
        </member>
        <member name="F:stunlib.Client.STUN_NetType.OpenInternet">
            <summary>
            No NAT, public IP, no firewall.
            </summary>
        </member>
        <member name="F:stunlib.Client.STUN_NetType.SymmetricUdpFirewall">
            <summary>
            No NAT, public IP, but symmetric UDP firewall.
            </summary>
        </member>
        <member name="F:stunlib.Client.STUN_NetType.FullCone">
            <summary>
            A full cone NAT is one where all requests from the same internal IP address and port are 
            mapped to the same external IP address and port. Furthermore, any external host can send 
            a packet to the internal host, by sending a packet to the mapped external address.
            </summary>
        </member>
        <member name="F:stunlib.Client.STUN_NetType.RestrictedCone">
            <summary>
            A restricted cone NAT is one where all requests from the same internal IP address and 
            port are mapped to the same external IP address and port. Unlike a full cone NAT, an external
            host (with IP address X) can send a packet to the internal host only if the internal host 
            had previously sent a packet to IP address X.
            </summary>
        </member>
        <member name="F:stunlib.Client.STUN_NetType.PortRestrictedCone">
            <summary>
            A port restricted cone NAT is like a restricted cone NAT, but the restriction 
            includes port numbers. Specifically, an external host can send a packet, with source IP
            address X and source port P, to the internal host only if the internal host had previously 
            sent a packet to IP address X and port P.
            </summary>
        </member>
        <member name="F:stunlib.Client.STUN_NetType.Symmetric">
            <summary>
            A symmetric NAT is one where all requests from the same internal IP address and port, 
            to a specific destination IP address and port, are mapped to the same external IP address and
            port.  If the same host sends a packet with the same source address and port, but to 
            a different destination, a different mapping is used. Furthermore, only the external host that
            receives a packet can send a UDP packet back to the internal host.
            </summary>
        </member>
    </members>
</doc>
